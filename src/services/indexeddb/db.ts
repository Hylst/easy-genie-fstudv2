// src/services/indexeddb/db.ts
"use client"; // Dexie runs in the browser

import Dexie, { type Table } from 'dexie';
import type { PriorityTask, Routine, RoutineStep, BrainDumpContent, TaskBreakerTask } from '@/types';

export class EasyGenieDB extends Dexie {
  priorityTasks!: Table<PriorityTask, string>; // string is the type of the primary key (id)
  routines!: Table<Routine, string>;
  routineSteps!: Table<RoutineStep, string>;
  brainDumps!: Table<BrainDumpContent, string>;
  taskBreakerTasks!: Table<TaskBreakerTask, string>;

  constructor() {
    super('EasyGenieDB_v1');
    this.version(1).stores({
      priorityTasks: '++id, user_id, quadrant, created_at, updated_at', // ++id for auto-incrementing UUIDs is not standard Dexie, using string for crypto.randomUUID()
      routines: '++id, user_id, name, created_at, updated_at',
      routineSteps: '++id, user_id, routine_id, order, created_at, updated_at',
      brainDumps: '++id, user_id, created_at, updated_at',
      taskBreakerTasks: '++id, user_id, parent_id, order, created_at, updated_at',
    });
    // Note on '++id': Dexie's '++' is for auto-incrementing primary keys (numbers).
    // Since we're using UUIDs (strings) generated by crypto.randomUUID(),
    // we should just use 'id' as the primary key and ensure it's provided.
    // Re-defining stores for UUIDs as primary keys:
    this.version(2).stores({
      priorityTasks: 'id, user_id, quadrant, created_at, updated_at',
      routines: 'id, user_id, name, created_at, updated_at',
      routineSteps: 'id, user_id, routine_id, order, created_at, updated_at',
      brainDumps: 'id, user_id, created_at, updated_at',
      taskBreakerTasks: 'id, user_id, parent_id, order, created_at, updated_at',
    }).upgrade(tx => {
        // Migration logic for version 2 if needed, e.g., if data format changed.
        // For now, if we just changed PK definition method, old data might be incompatible if it relied on '++id'.
        // For a fresh setup, this is fine. If migrating, would need to handle existing data.
        console.log("Upgrading EasyGenieDB to version 2, schema for UUIDs defined.");
    });
  }
}

// Export a singleton instance of the database
let dbInstance: EasyGenieDB | null = null;

export const getDb = (): EasyGenieDB => {
  if (typeof window === 'undefined') {
    // This should ideally not be called server-side, but as a safeguard:
    throw new Error("Dexie (IndexedDB) can only be used in the browser.");
  }
  if (!dbInstance) {
    dbInstance = new EasyGenieDB();
  }
  return dbInstance;
};