// src/services/supabase/priority-task.supabase.service.ts
import { supabase } from '@/lib/supabaseClient';
import type { IPriorityTaskService } from '../interfaces/IPriorityTaskService';
import type { PriorityTask, CreatePriorityTaskDTO } from '@/types';

export class PriorityTaskSupabaseService implements IPriorityTaskService {
  private tableName = 'priority_tasks';

  async getAll(userId: string): Promise<PriorityTask[]> {
    if (!userId) {
        console.warn("PriorityTaskSupabaseService.getAll: userId is required. Returning empty array.");
        return [];
    }
    const { data, error } = await supabase
      .from(this.tableName)
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (error) {
        console.error("Error fetching all priority tasks from Supabase:", error);
        throw error;
    }
    return data || [];
  }

  async getById(id: string, userId: string): Promise<PriorityTask | null> {
    if (!userId) {
        console.warn("PriorityTaskSupabaseService.getById: userId is required.");
        return null;
    }
    const { data, error } = await supabase
      .from(this.tableName)
      .select('*')
      .eq('id', id)
      .eq('user_id', userId)
      .single();

    if (error && error.code !== 'PGRST116') { // PGRST116: 'No rows found'
        console.error(`Error fetching priority task ${id} from Supabase:`, error);
        throw error;
    }
    return data; // data will be null if not found and PGRST116, or the task object
  }

  async add(taskData: CreatePriorityTaskDTO, userId: string): Promise<PriorityTask> {
    if (!userId) {
        throw new Error("PriorityTaskSupabaseService.add: userId is required to add a task.");
    }
    // Supabase typically handles created_at and updated_at via default values or triggers
    // The schema `supabase_schema.sql` sets default for created_at and a trigger for updated_at
    const taskToAdd = {
      ...taskData, // spread DTO
      user_id: userId,
      isCompleted: taskData.isCompleted ?? false, // Default if not provided
      // id will be generated by Supabase if your column has `default gen_random_uuid()`
      // or you can generate it client-side if preferred: id: crypto.randomUUID()
    };

    const { data, error } = await supabase
      .from(this.tableName)
      .insert(taskToAdd)
      .select() // Fetch the inserted row
      .single(); // Expect a single row back

    if (error) {
        console.error("Error adding priority task to Supabase:", error);
        throw error;
    }
    if (!data) {
        throw new Error("Failed to add priority task to Supabase, no data returned.");
    }
    return data as PriorityTask; // Cast to PriorityTask
  }

  async update(id: string, taskData: Partial<CreatePriorityTaskDTO>, userId: string): Promise<PriorityTask> {
    if (!userId) {
        throw new Error("PriorityTaskSupabaseService.update: userId is required to update a task.");
    }
    // Supabase trigger should handle updated_at
    // Ensure user_id is not part of taskData to prevent changing ownership.
    // The .eq('user_id', userId) in the query ensures only owner can update.
    const { user_id: ignoredUserIdInDTO, ...restOfTaskData } = taskData as any; // Exclude user_id from DTO if present

    const taskToUpdate = {
      ...restOfTaskData,
    };
    
    const { data, error } = await supabase
      .from(this.tableName)
      .update(taskToUpdate)
      .eq('id', id)
      .eq('user_id', userId) // Important: ensure user can only update their own tasks
      .select()
      .single();

    if (error) {
        console.error(`Error updating priority task ${id} in Supabase:`, error);
        throw error;
    }
    if (!data) {
        throw new Error("Failed to update priority task in Supabase, no data returned or task not found for user.");
    }
    return data as PriorityTask;
  }

  async delete(id: string, userId: string): Promise<void> {
    if (!userId) {
        throw new Error("PriorityTaskSupabaseService.delete: userId is required to delete a task.");
    }
    const { error } = await supabase
      .from(this.tableName)
      .delete()
      .eq('id', id)
      .eq('user_id', userId); // Important: ensure user can only delete their own tasks

    if (error) {
        console.error(`Error deleting priority task ${id} from Supabase:`, error);
        throw error;
    }
  }
}
